/*
 * @file hw_timer.cpp
 * @date 2012/08/22
 * @author Michael Ruffer, modified by Johannes Freitag
 *
 * Copyright 2012 University of Wuerzburg
 *
 * @brief Timer for system time and preemption
 */
#include "rodos.h"
#include "hw_specific.h"

#include "params.h"
#include "xscutimer.h"
#include "xscugic.h"
#include "xil_exception.h"
#include "xil_printf.h"
#include "xparameters.h"

//#include "bcm2835.h"

#ifndef NO_RODOS_NAMESPACE
namespace RODOS {
#endif

#define XSCUTIMER_CLOCK_HZ XPAR_CPU_CORTEXA9_0_CPU_CLK_FREQ_HZ/2
int64_t Timer::microsecondsInterval = PARAM_TIMER_INTERVAL;

static XScuTimer timer;						/* A9 timer counter */
static XScuGic InterruptController;         /* Interrupt controller instance */


void Timer::init() {

/*	uint32_t count;
	count = GET32(CLOL); //get current counter value
	count += Timer::microsecondsInterval*10;  //add period

	PUT32(C1, count);  //set compare value
	PUT32(CS, (1 << COUNTER1));  //reset counter interrupt
	PUT32(0x2000B210, (1 << COUNTER1)); //activate timer interrupt

	enable_irq(); //enable interrupts global
*/

//the code below is copied from Freertos port.c code, without the interrupt controller code.
	int Status;
	XScuTimer_Config *ScuConfig;

	ScuConfig = XScuTimer_LookupConfig(XPAR_SCUTIMER_DEVICE_ID);

	Status = XScuTimer_CfgInitialize(&timer, ScuConfig,
									ScuConfig->BaseAddr);
	if (Status != XST_SUCCESS) {
		return;
	}

	/*
	 * Enable Auto reload mode.
	 */
	XScuTimer_EnableAutoReload(&timer);

	/*
	 * Load the timer counter register.
	 */
	XScuTimer_LoadTimer(&timer, XSCUTIMER_CLOCK_HZ / 100);

	/*
	 * Start the timer counter and then wait for it
	 * to timeout a number of times.
	 */
	XScuTimer_Start(&timer);

	/*
	 * Enable the interrupt for the Timer in the interrupt controller
	 */
	//XScuGic_Enable(&InterruptController, XPAR_SCUTIMER_INTR);

	/*
	 * Enable the timer interrupts for timer mode.
	 */
	XScuTimer_EnableInterrupt(&timer);
	//for testing, output the time register value
	//xprintf("the timer should be start!\n");
	xprintf("time register value=: HEX: %lx Dec: %ld\n",(XScuTimer_GetCounterValue(&timer)),(XScuTimer_GetCounterValue(&timer)));
	/*
	 * Do NOT enable interrupts in the ARM processor here.
	 * This happens when the scheduler is started.
	 */
}

/**
 * start timer
 * not necessary in this port because interrupts are disabled in swi routine contextSwitch
 */
void Timer::start() {
}

/**
 * stop timer
 * not necessary in this port because interrupt are disabled in swi routine contextSwitch
 */
void Timer::stop() {
}

/**
 * set timer interval
 */
void Timer::setInterval(const int64_t microsecondsInterval) {
	Timer::microsecondsInterval = microsecondsInterval;
}

/**
 * time at bootup
 */
uint64_t initNanoTime = 0;

/**
 * RODOS time
 */
uint64_t hwGetNanoseconds() {
	//return (((uint64_t) GET32(CLOL))
	//		| ((uint64_t) GET32(CLOH) << 32)) * 1000 - initNanoTime;
	//invoke the Micro to get the current timer counter register value.
	return (uint64_t)(XScuTimer_GetCounterValue(&timer));
}

/**
 * set time at bootup
 */
void hwInitTime() {
	//initNanoTime = (((uint64_t) GET32(CLOL))
	//		| ((uint64_t) GET32(CLOH) << 32)) * 1000;
}

uint64_t hwGetAbsoluteNanoseconds(void) {
	return hwGetNanoseconds(); // + timeAtStartup;
}

#ifndef NO_RODOS_NAMESPACE
}
#endif

