/*
*@file hw_specific.cpp for cortex A9 Zynq MicroZed.
*@data 2014/07/07
*@author Wei Zhang
*@Modified based on the previous version below
*@Copyright 2014 DLR
*/


/*
 * This file contains source code copyrighted by David Welch distributed under the terms of the MIT license.
 */
/*orignial version below
 *
 * @file hw_specific.cpp
 * @date 2013/06/01
 * @author Johannes Freitag, Sergio Montenegro, David Welch
 *
 * Copyright 2013 DLR and University Wuerzburg
 */

#include <rodos.h>
//#include <hal_uart.h>

#include "params.h"
#include "hw_specific.h"
//#include "bcm2835.h"

volatile long *contextT;

#ifndef NO_RODOS_NAMESPACE
namespace RODOS {
#endif
	
	
/*********************************************************************************************/
/* CONTEXT SWITCH AND INTERRUPT HANDLING */
/*********************************************************************************************/

extern int64_t timeToTryAgainToSchedule;
extern bool isSchedulingEnabled;
volatile long taskRunning = 0;

#define CONTEXT_SAVE  	__asm volatile ( \
	/* push r0 to use the register*/ \
	"push {r0}            \n\t"  \
	/* set r0 to point to the task stack pointer */ \
	"stmdb sp, {sp}^      \n\t" /* ^ means get the system mode SP value */  \
	"NOP                  \n\t" \
	"sub sp, sp, #4       \n\t" \
	"pop {r0}             \n\t" \
	/* push the return address onto the task stack */ \
	"stmdb r0!, {lr}      \n\t" \
	/* now we have saved lr we can use it instead of r0 */ \
	"mov lr, r0           \n\t" \
	/* pop r0 so we can save it onto the task stack */ \
	"ldmia sp!, {r0}      \n\t" \
	/* push all the system mode registers onto the task stack */ \
	"stmdb lr,{r0-r14}^   \n\t" \
	"NOP                  \n\t" \
	"sub lr, lr, #60      \n\t" \
	/* push all the fpu mode registers onto the task stack */ \
	/*"vstmdb lr!,{s0-s31}   \n\t"*/ \
	/* Push the SPSR onto the task stack. */ \
	"MRS R0, SPSR         \n\t" \
	"STMDB LR!, {R0}      \n\t" );

#define CONTEXT_LOAD  	__asm volatile ( \
	/* get the top of stack for the task */  \
	"ldr r0, =contextT     \n\t" \
	/* move the task stack pointer into the Link Register */  \
	"ldr lr, [r0]          \n\t" \
	"ldr r0, [r0]          \n\t" \
	/* Get the SPSR from the stack. */  \
	"LDMFD LR!, {R0}       \n\t" \
	"MSR SPSR_cxsf, R0     \n\t" \
	/* restore all fpu registers */  \
	/*"vldmia lr!, {s0-s31}   \n\t" */ \
	/* restore all system mode registers for the task */  \
	"ldmfd lr, {r0-r14}^   \n\t" \
	"NOP                   \n\t" \
	/* restore the return address */  \
	"ldr lr, [lr, #+60]    \n\t" \
	/* return to next instruction in new task and leave irq */  \
	"SUBS	PC, LR, #4		\n\t"	\
	"NOP					\n\t"	\
	"NOP					\n\t"	);

extern "C" {

//extern void UART0_IRQHandler();

/*
 * Handles the hardware interrupt after saving the context and determines who has raised the interrupt
 */
void handleInterrupt(long int* context) {
	contextT = context;

	//handles the timer interrupts
	//left as stub and implement later
	/*if (GET32(CS) & (1 << COUNTER1)) {
		//calc next ticktime
		uint32_t nextTick = GET32(CLOL) + PARAM_TIMER_INTERVAL; //alle 10ms // hier muss  Timer::microsecondsInterval

		if (isSchedulingEnabled == true) {
			TTime timeNow = NOW();
			TimeEvent::propagate(timeNow);
			if (NOW()> timeToTryAgainToSchedule) {
				// call scheduler with top of task stack
					schedulerWrapper(context);
				}
			}
			//set next tick time
		PUT32(C1, nextTick);
		//Write a one to the relevant bit to clear the match detect status bit and the corresponding interrupt request line.
		//BCM2835 ARM Peripherals 172
		PUT32(CS, 0x2);
	}*/

	//handles the uart interrupt
	//if (AUX_MU_IIR_RX_IRQ) {
	//	UART0_IRQHandler();
	//}

}


/**
 * pushes the context to the old task stack - handles hardware interrupts - pops the context of the new task from the new task stack
 */
__attribute__ (( naked ))
void c_irq_handler(void) {

	//lr has to be adjusted in hardware irq
	__asm volatile ( "sub lr,lr,#4         \n\t" );

	// save old context
	CONTEXT_SAVE

	//call handler and sheduler
	__asm volatile (
			"mov r0, lr           \n\t"
			"bl handleInterrupt             \n\t" );

	// restore context of new task
	CONTEXT_LOAD

}

/**
 * pushes the context to the old task stack - schedules - pops the context of the new task from the new task stack
 *
 * contextSwitch is called from the ISR of the software interrupt
 * a software interrupt is raised in yield and in the irq_handler for preemtion
 * in swi the interrupts are disabled
 */
__attribute__ (( naked ))
void contextSwitch(void) {

	//__asm volatile ( "ADD	LR, LR, #4" );
	// save old context
	CONTEXT_SAVE

    // call scheduler with top of task stack in r0
	__asm volatile (
			"mov r0, lr            \n\t"
			"bl schedulerWrapper   \n\t");

	// restore context of new task
	CONTEXT_LOAD

}

void __asmSwitchToContext(long* context) {
	contextT = context;
}

void __asmSaveContextAndCallScheduler() {
	__asm volatile ("swi 0");
}

}			//end extern "C"

/** Command by Wei
 * create context on the stack and return a pointer to it
 *
 * this context has to look like it had been created by the contextSwitch
 */
long int* hwInitContext(long* stack, void* object) {

	uint32_t psp = (uint32_t) stack;

	//bottom of stack
	
	stack--;
	*stack = (int32_t) (threadStartupWrapper);	// lr in swi mode
	stack--;
	*stack = 0; 				// lr in sys mode
	stack--;
	// not sure if need -8
	*stack = psp-8; 			// sp specila for the cortex a9 that -8
	stack--;
	*stack = 0x12121212; 				// r12
	stack--;
	*stack = 0x11111111; 				// r11
	stack--;
	*stack = 0x10101010; 				// r10
	stack--;
	*stack = 0x09090909; 				// r9
	stack--;
	*stack = 0x08080808; 				// r8
	stack--;
	*stack = 0x07070707; 				// r7
	stack--;
	*stack = 0x06060606; 				// r6
	stack--;
	*stack = 0x05050505; 				// r5
	stack--;
	*stack = 0x04040404; 				// r4
	stack--;
	*stack = 0x03030303; 				// r3
	stack--;
	*stack = 0x02020202; 				// r2
	stack--;
	*stack = 0x01010101; 				// r1
	stack--;
	*stack = (int32_t) object; 		// r0
	//stack -= 32;				// FPU
	stack--;
	/* ctx->CPSR = CPSR */
	asm volatile (
		"mrs  %0, CPSR     \n\t"
		: "=r"(*stack)       // Output registers
	);
	//*stack = GETcpsr(); 	    		// SPSR
	//*stack = *stack & ~0x80;    		//interrupts enabled
	//top of stack

	return stack;
}

/** switches to the context of the initial idle thread
 * called in main() -> Scheduler::idle();
 * basically the same as the "restore context of new task" part from c_swi_handler
 */
__attribute__ (( naked ))
void startIdleThread() {
	CONTEXT_LOAD
}




/*********************************************************************************************/
/* HARDWARE INITIALIZATION */
/*********************************************************************************************/


/**
  *  global interrupt disable
  */
void hwDisableInterrupts(){
    #warning "irq disable not tested yet"
    __asm volatile (														\
			"STMDB	SP!, {R0}		\n\t"	/* Push R0.						*/	\
			"MRS	R0, CPSR		\n\t"	/* Get CPSR.					*/	\
			"ORR	R0, R0, #0xC0	\n\t"	/* Disable IRQ, FIQ.			*/	\
			"MSR	CPSR, R0		\n\t"	/* Write back modified value.	*/	\
			"LDMIA	SP!, {R0}			" );	/* Pop R0.						*/
}

/**
  *  global interrupt enable
  */
void hwEnableInterrupts(){
    #warning "irq enable not tested yet"
    __asm volatile (														\
			"STMDB	SP!, {R0}		\n\t"	/* Push R0.						*/	\
			"MRS	R0, CPSR		\n\t"	/* Get CPSR.					*/	\
			"BIC	R0, R0, #0xC0	\n\t"	/* Enable IRQ, FIQ.				*/	\
			"MSR	CPSR, R0		\n\t"	/* Write back modified value.	*/	\
			"LDMIA	SP!, {R0}			" );	/* Pop R0.						*/
}


/**
 * In case a network is avialable, the corresponding node nr.
 */
/*
long myNodeNr = -1;

long getNodeNumber() {
	return myNodeNr;
}
*/

#ifndef NO_RODOS_NAMESPACE
}
#endif

